{"version":3,"sources":["sounds/beep.mp3","sounds/select.mp3","Redux/Actions/ActionType.js","Redux/Reducer/winReducer.js","Redux/Store/store.js","Components/sound.js","Redux/Actions/ViewerAction.js","Redux/Actions/EditorAction.js","Components/EditorToolbar.js","Components/Editor.js","Components/Viewer.js","Components/ToolBar.js","Components/Container.js","App.js","index.js"],"names":["module","exports","actionTypes","EDITOR_CLOSING","EDITOR_CLOSED","EDITOR_OPENING","EDITOR_OPENED","EDITOR_MAXIMIZING","EDITOR_MAXED","EDITOR_MINIMIZING","EDITOR_MINED","EDITOR_TEXT_CHANGED","VIEWER_CLOSING","VIEWER_CLOSED","VIEWER_OPENING","VIEWER_OPENED","VIEWER_MAXIMIZING","VIEWER_MAXED","VIEWER_MINIMIZING","VIEWER_MINED","initialState","editorText","isEditorApplyClass","isEditorApplyMaxClass","isEditorClosed","isEditorMaxed","isViewerApplyClass","window","innerWidth","isViewerApplyMaxClass","isViewerClosed","isViewerMaxed","transitioning","transitionTimer","winReducer","state","action","type","ActionType","payload","text","store","createStore","Reducer","applyMiddleware","Thunk","beep","document","createElement","src","require","selected","load","play","delay","getState","viewerAction","closingViewer","dispatch","setTimeout","closedViewer","openingViewer","openedViewer","maxingViewer","EditorAction","closingEditor","maxedViewer","miningViewer","openingEditor","minedViewer","editorAction","closedEditor","openedEditor","maxingEditor","ViewerAction","maxedEditor","miningEditor","minedEditor","editorTextChange","position","EditorToolbar","props","iconClicked","bind","e","sounds","id","target","toolClick","this","className","title","onClick","tabIndex","React","Component","Editor","getClass","getIconClass","closeEditor","maxOrMinimize","insertAtCaret","getElementById","addEventListener","fetch","then","file","cls","value","toIns","textarea","posStart","selectionStart","posEnd","selectionEnd","focus","substring","length","setSelectionRange","onChange","connect","Viewer","closeViewer","dangerouslySetInnerHTML","__html","marked","replace","breaks","ToolBar","editorBtnClicked","vieworBtnClicked","Container","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ed115f0d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beep.9558f9d0.mp3\";","module.exports = __webpack_public_path__ + \"static/media/select.f519d0a2.mp3\";","const actionTypes = {\r\n    \r\n    //CLASS APPLIED WILL SCALE X AND Y TO 0\r\n    \r\n    EDITOR_CLOSING: 'EDITOR_CLOSING',   //  Will apply CLASS which scale Y to 0 and scale X to 0\r\n    EDITOR_CLOSED: 'EDITOR_CLOSED',     //  Will display none, and updates the state value\r\n    EDITOR_OPENING: 'EDITOR_OPENING',  //  Will immediately display flex, undo CLASS\r\n    EDITOR_OPENED: 'EDITOR_OPENED',     //  After some time, Just updates the state value\r\n\r\n    EDITOR_MAXIMIZING: 'EDITOR_MAXIMIZING',     //  Will apply CLASS which position fixed, makes transition of moving\r\n    EDITOR_MAXED: 'EDITOR_MAXED',               //  Update the store (Change the button also)\r\n    EDITOR_MINIMIZING: 'EDITOR_MINIMIZING',     //  Will remove CLASS\r\n    EDITOR_MINED: 'EDITOR_MINED',               //  After some time, just updates the state value\r\n\r\n    EDITOR_TEXT_CHANGED: 'EDITOR_TEXT_CHANGED',\r\n\r\n    VIEWER_CLOSING: 'VIEWER_CLOSING',\r\n    VIEWER_CLOSED: 'VIEWER_CLOSED',\r\n    VIEWER_OPENING: 'VIEWER_OPENING',\r\n    VIEWER_OPENED: 'VIEWER_OPENED',\r\n\r\n    VIEWER_MAXIMIZING: 'VIEWER_MAXIMIZING',\r\n    VIEWER_MAXED: 'VIEWER_MAXED',\r\n    VIEWER_MINIMIZING: 'VIEWER_MINIMIZING',\r\n    VIEWER_MINED: 'VIEWER_MINED'\r\n}\r\n\r\nexport default actionTypes;\r\n\r\n\r\n/*\r\n    When want to close editor:\r\n\r\n    Initially (Display: flex) \r\n    ACTION > Closing (Transition types come into act through a class)\r\n    ACTION > Closed  (After a set amount of time, make the editor window display none and update state value)\r\n\r\n    When want to open editor:\r\n\r\n    Initially (Display: none)\r\n    ACTION > OPENING  (Display: flex. Transition should come into act if nothing goes wrong)\r\n    ACTION > OPENED   (After a set amount of time, Update state value )\r\n\r\n*/","import ActionType from '../Actions/ActionType';\r\n\r\n\r\nconst initialState = {\r\n    editorText: '',\r\n\r\n    isEditorApplyClass: false,\r\n    isEditorApplyMaxClass: false,\r\n    isEditorClosed: false,\r\n    isEditorMaxed: false,\r\n\r\n    isViewerApplyClass: !(window.innerWidth >= 800),\r\n    isViewerApplyMaxClass: false,\r\n    isViewerClosed: !(window.innerWidth >= 800),\r\n    isViewerMaxed: false,\r\n\r\n    transitioning: false,\r\n    transitionTimer: 1000\r\n}\r\n\r\nfunction winReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case ActionType.EDITOR_CLOSING:\r\n            return {...state, isEditorApplyClass: true, transitioning: true };\r\n        case ActionType.EDITOR_CLOSED:\r\n            return {...state, isEditorClosed: true, transitioning: false};\r\n        case ActionType.EDITOR_OPENING:\r\n            return {...state, isEditorApplyClass: false, isEditorClosed: false, transitioning: true}\r\n        case ActionType.EDITOR_OPENED:\r\n            return {...state, transitioning: false };\r\n\r\n        case ActionType.EDITOR_MAXIMIZING:\r\n            return {...state, isEditorApplyMaxClass: true, transitioning: true };\r\n        case ActionType.EDITOR_MAXED:\r\n            return {...state, isEditorMaxed: true, transitioning: false};\r\n        case ActionType.EDITOR_MINIMIZING:\r\n            return {...state, isEditorApplyMaxClass: false, transitioning: true };\r\n        case ActionType.EDITOR_MINED:\r\n            return {...state, isEditorMaxed: false, transitioning: false};\r\n\r\n        case ActionType.EDITOR_TEXT_CHANGED:\r\n            return {...state, editorText: action.payload.text };\r\n\r\n        //==============================================================//\r\n        case ActionType.VIEWER_CLOSING:\r\n            return {...state, isViewerApplyClass: true, transitioning: true };\r\n        case ActionType.VIEWER_CLOSED:\r\n            return {...state, isViewerClosed: true, transitioning: false };\r\n        case ActionType.VIEWER_OPENING:\r\n            return {...state, isViewerApplyClass: false, isViewerClosed: false, transitioning: true };\r\n        case ActionType.VIEWER_OPENED:\r\n            return {...state, transitioning: false };\r\n\r\n        case ActionType.VIEWER_MAXIMIZING:\r\n            return {...state, isViewerApplyMaxClass: true, transitioning: true };\r\n        case ActionType.VIEWER_MAXED:\r\n            return {...state, isViewerMaxed: true, transitioning: false};\r\n        case ActionType.VIEWER_MINIMIZING:\r\n            return {...state, isViewerApplyMaxClass: false, transitioning: true };\r\n        case ActionType.VIEWER_MINED:\r\n            return {...state, isViewerMaxed: false, transitioning: false};\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default winReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport Reducer from '../Reducer/winReducer';\r\nimport Thunk from 'redux-thunk';\r\n\r\nconst store = createStore( Reducer, \r\n    applyMiddleware(Thunk)\r\n);\r\n\r\nexport default store;","const beep = document.createElement('audio');\r\nbeep.src = require('../sounds/beep.mp3');\r\n\r\nconst selected = document.createElement('audio');\r\nselected.src = require('../sounds/select.mp3');\r\n\r\nexport default {\r\n    playBeep: () => {\r\n        beep.load();\r\n        beep.play();\r\n    },\r\n    playSelect: () => {\r\n        selected.load();\r\n        selected.play();\r\n    }\r\n};","import ActionType from './ActionType';\r\nimport store from '../Store/store';\r\n\r\nimport EditorAction from './EditorAction';\r\n\r\nlet delay = store.getState().transitionTimer;\r\n\r\nconst viewerAction = {\r\n\r\n    //=========OPENING AND CLOSING============//\r\n    closingViewer: () => (dispatch) => {\r\n        dispatch({ type: ActionType.VIEWER_CLOSING } );\r\n        setTimeout(() => {\r\n            dispatch( viewerAction.closedViewer() );\r\n        }, delay );\r\n    },\r\n    closedViewer: () => {\r\n        return { type: ActionType.VIEWER_CLOSED };\r\n    },\r\n    openingViewer: () => (dispatch) => {\r\n        dispatch({ type: ActionType.VIEWER_OPENING });\r\n        setTimeout(() => {\r\n            dispatch( viewerAction.openedViewer() );\r\n        }, delay);\r\n    },\r\n    openedViewer: () => {\r\n        return { type: ActionType.VIEWER_OPENED };\r\n    },\r\n\r\n    //=========MAXIMIZING AND MINIMIZING============//\r\n    maxingViewer: () => (dispatch) => {\r\n        dispatch( EditorAction.closingEditor() );\r\n        setTimeout(() => {\r\n            dispatch({ type: ActionType.VIEWER_MAXIMIZING } );\r\n            setTimeout(() => {\r\n                dispatch( viewerAction.maxedViewer() );\r\n            }, delay);\r\n        }, delay);\r\n    },\r\n    maxedViewer: () => {\r\n        return { type: ActionType.VIEWER_MAXED };\r\n    },\r\n    miningViewer: () => (dispatch) => {\r\n        dispatch({ type: ActionType.VIEWER_MINIMIZING } );\r\n        setTimeout(() => {\r\n            dispatch( EditorAction.openingEditor() );\r\n            setTimeout(() => {\r\n                dispatch( viewerAction.minedViewer() );\r\n            }, delay);\r\n        }, delay);\r\n    },\r\n    minedViewer: () => {\r\n        return { type: ActionType.VIEWER_MINED };\r\n    }\r\n}\r\n\r\nexport default viewerAction;","import ActionType from './ActionType';\r\nimport store from '../Store/store';\r\n\r\nimport ViewerAction from './ViewerAction';\r\n\r\nlet delay = store.getState().transitionTimer;\r\n\r\nconst editorAction = {\r\n    \r\n    //=========OPENING AND CLOSING============//\r\n    closingEditor: () => (dispatch) => {\r\n        dispatch({ type: ActionType.EDITOR_CLOSING } );\r\n        setTimeout(() => {\r\n            dispatch( editorAction.closedEditor() );\r\n        }, delay );\r\n    },\r\n    closedEditor: () => {\r\n        return { type: ActionType.EDITOR_CLOSED }\r\n    },\r\n    openingEditor: () => (dispatch) => {\r\n        dispatch({ type: ActionType.EDITOR_OPENING });\r\n        setTimeout(() => {\r\n            dispatch( editorAction.openedEditor() );\r\n        }, delay);\r\n    },\r\n    openedEditor: () => {\r\n        return { type: ActionType.EDITOR_OPENED };\r\n    },\r\n\r\n    //=========MAXIMIZING AND MINIMIZING============//\r\n    maxingEditor: () => (dispatch) => {\r\n        dispatch( ViewerAction.closingViewer() );\r\n        setTimeout(() => {\r\n            dispatch({ type: ActionType.EDITOR_MAXIMIZING } );\r\n            setTimeout(() => {\r\n                dispatch( editorAction.maxedEditor() );\r\n            }, delay);\r\n        }, delay);\r\n    },\r\n    maxedEditor: () => {\r\n        return { type: ActionType.EDITOR_MAXED };\r\n    },\r\n    miningEditor: () => (dispatch) => {\r\n        dispatch({ type: ActionType.EDITOR_MINIMIZING } );\r\n        setTimeout(() => {\r\n            dispatch( ViewerAction.openingViewer() );\r\n            setTimeout(() => {\r\n                dispatch( editorAction.minedEditor() );\r\n            }, delay);\r\n        }, delay);\r\n    },\r\n    minedEditor: () => {\r\n        return { type: ActionType.EDITOR_MINED };\r\n    },\r\n\r\n    //=========EDITOR TEXT CHANGED============//\r\n    editorTextChange: (text, position) => {\r\n        return { \r\n            type: ActionType.EDITOR_TEXT_CHANGED, \r\n            payload: {\r\n                text: text\r\n            } \r\n        };\r\n    }\r\n\r\n}\r\n\r\nexport default editorAction;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport sounds from './sound';\r\n\r\n\r\nclass EditorToolbar extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.iconClicked = this.iconClicked.bind(this);\r\n    }\r\n\r\n    //  Called when one of the icon in toolbar is clicked. Will call the editor component's insert text method\r\n    iconClicked(e) {\r\n        sounds.playSelect();\r\n        const id = e.target.id;\r\n        const { toolClick } = this.props;\r\n        const getInsertText = {\r\n            'bold-text': '**Strong Text**',\r\n            'italic-text': '_Emphasized Text_',\r\n            'blockquote-text': '> Block Quote',\r\n            'link-text': '[Link](http://)',\r\n            'picture-text': '![Alt Text](http://)',\r\n            'code-text': '`Inline Code`',\r\n            'list-text': '- List Item',\r\n            'ollist-text': '1. List Item'\r\n        }\r\n\r\n        toolClick(null, getInsertText[id] );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='editor-toolbar' id='editor-toolbar'>\r\n                <div>\r\n                    <abbr title='Bold'> <i className='fa fa-bold' id='bold-text' \r\n                        onClick={ this.iconClicked } tabIndex='0' ></i> </abbr>\r\n                    <abbr title='Italic'> <i className='fa fa-italic' id='italic-text'\r\n                        onClick={ this.iconClicked } tabIndex='0'></i> </abbr>\r\n                </div>\r\n                <div>\r\n                    <abbr title='Block Quote'> <i className='fa fa-quote-left' id='blockquote-text'\r\n                        onClick={ this.iconClicked } tabIndex='0'></i> </abbr>\r\n                    <abbr title='Link'> <i className='fa fa-link' id='link-text'\r\n                        onClick={ this.iconClicked } tabIndex='0'></i> </abbr>\r\n                    <abbr title='Picture'> <i className='fa fa-image' id='picture-text'\r\n                        onClick={ this.iconClicked } tabIndex='0'></i> </abbr>\r\n                    <abbr title='Code Block'> <i className='fa fa-code' id='code-text'\r\n                        onClick={ this.iconClicked } tabIndex='0'></i> </abbr>\r\n                </div>\r\n                <div>\r\n                    <abbr title='Unordered List'> <i className='fa fa-list' id='list-text'\r\n                        onClick={ this.iconClicked } tabIndex='0'></i> </abbr>\r\n                    <abbr title='Ordered List'> <i className='fa fa-list-ol' id='ollist-text'\r\n                        onClick={ this.iconClicked } tabIndex='0'></i> </abbr>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nEditorToolbar.propTypes = {\r\n    toolClick: PropTypes.func.isRequired\r\n}\r\n\r\nexport default EditorToolbar;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport sounds from './sound';\r\n\r\nimport EditorAction from '../Redux/Actions/EditorAction'\r\nimport EditorToolBar from './EditorToolbar';\r\n\r\n/*\r\n    Editor Window\r\n    This is the window where the user will input markdown text, and being parsed to the previewer\r\n    The editor also contains a toolbar to insert markdown easily\r\n*/\r\n\r\nclass Editor extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.getClass = this.getClass.bind(this);\r\n        this.getIconClass = this.getIconClass.bind(this);\r\n        this.closeEditor = this.closeEditor.bind(this);\r\n        this.maxOrMinimize = this.maxOrMinimize.bind(this);\r\n        this.editorTextChange = this.editorTextChange.bind(this);\r\n        this.insertAtCaret = this.insertAtCaret.bind(this);\r\n    }\r\n\r\n    //  Adding Event Listeners to buttons.\r\n    componentDidMount() {\r\n        document.getElementById('editor-close-btn').addEventListener('click', this.closeEditor );\r\n        document.getElementById('editor-maxmin-btn').addEventListener('click', this.maxOrMinimize );\r\n\r\n        //  When the window is resized to wide screen, determine if editor should be forced to open\r\n        //  based on if previewer is maximized and editor is closed or not\r\n        window.addEventListener('resize', ()=> {\r\n            if (window.innerWidth >= 800 && !this.props.isViewerMaxed && this.props.isEditorClosed ) {\r\n                this.props.openingEditor();\r\n            }\r\n        });\r\n\r\n        //  Fetch the default text from online source (My cheat sheet)\r\n        fetch('https://raw.githubusercontent.com/AdmiJW/Items/master/Misc/markdown.md')\r\n        .then(file => file.text() )\r\n        .then(text => this.props.editorTextChange(text)); \r\n    }\r\n\r\n    //  Apply appropriate class names based on the state (Transitioning, or closed)\r\n    getClass() {\r\n        const { isEditorApplyClass, isEditorClosed, isEditorApplyMaxClass, isEditorMaxed } = this.props;\r\n        let cls = 'editor';\r\n        if ( isEditorApplyClass ) cls += ' scale0';\r\n        if ( isEditorClosed ) cls += ' closed';\r\n        if ( isEditorApplyMaxClass ) cls += ' maxClass';\r\n        if ( isEditorMaxed ) cls += ' maxed';\r\n\r\n        return cls;\r\n    }\r\n\r\n    //  Apply class names to the Maximize or minimize button. Changes when maximized or minimized\r\n    getIconClass() {\r\n        let cls = 'fas editor-maxmin-btn'\r\n        if (this.props.isEditorMaxed) cls += ' fa-compress-arrows-alt';\r\n        else cls += ' fa-expand-arrows-alt';\r\n        return cls\r\n    }\r\n\r\n    //  Close button is clicked, so apply closing transition, then close it\r\n    closeEditor() {\r\n        const { closingEditor } = this.props;\r\n        sounds.playBeep();\r\n        closingEditor();\r\n    }\r\n\r\n    //  Max or min button is clicked, so apply maximizing transition, then change the button type\r\n    maxOrMinimize() {\r\n        const { isEditorMaxed, maxingEditor, miningEditor, transitioning } = this.props;\r\n        if (transitioning) return;\r\n\r\n        sounds.playBeep();\r\n        if (isEditorMaxed ) {\r\n            miningEditor();\r\n        }\r\n        else maxingEditor();\r\n    }\r\n\r\n    //  Called when the text in editor is changed (by user or triggered by code). Dispatch action\r\n    editorTextChange(e) {\r\n        this.props.editorTextChange( document.getElementById('editor').value );\r\n    }\r\n\r\n    //  Appends some text into the cursor in text area (Triggered by toolbar click)\r\n    insertAtCaret(e, toIns='') {\r\n        let textarea = document.getElementById('editor');\r\n        const posStart = textarea.selectionStart;\r\n        const posEnd = textarea.selectionEnd;\r\n        const text = textarea.value;\r\n    \r\n        textarea.focus();\r\n        //If the previous same length substring is the same as the text to insert, then remove it\r\n        if ( text.substring( posEnd - toIns.length , posEnd) === toIns ) {\r\n            textarea.value = text.substring(0, posEnd - toIns.length) + text.substring(posEnd);\r\n            textarea.setSelectionRange(posStart, posStart);\r\n        }\r\n        //Else insert the string\r\n        else {\r\n            \r\n            textarea.value = `${text.substring(0, posEnd)}${toIns}${text.substring(posEnd)}`;\r\n            \r\n            textarea.setSelectionRange(posEnd, posEnd + toIns.length );\r\n        }\r\n        //Trigger the redux action dispatch\r\n        this.editorTextChange();\r\n    }\r\n\r\n    render() {\r\n        ////////////////JSX///////////////////\r\n        return (\r\n        <div className={ this.getClass() } >\r\n        <header className='win-header'>\r\n            <i className=\"fas fa-scroll win-header-logo\"></i>\r\n            EDITOR\r\n            <i tabIndex='1' className=\"fas fa-times editor-btn\" id='editor-close-btn'></i>\r\n            <i tabIndex='1' className={this.getIconClass() } id='editor-maxmin-btn'></i>\r\n        </header>\r\n        <EditorToolBar toolClick={ this.insertAtCaret } />\r\n        <textarea className='text-area closeOpenTrans' id='editor' onChange={this.editorTextChange}\r\n             value={this.props.editorText}></textarea>\r\n        </div>\r\n        );\r\n        /////////////////JSX//////////////////\r\n    }\r\n\r\n}\r\n\r\n\r\nEditor.propTypes = {\r\n    isEditorApplyClass: PropTypes.bool.isRequired,\r\n    isEditorApplyMaxClass: PropTypes.bool.isRequired,\r\n    isEditorClosed: PropTypes.bool.isRequired,\r\n    isEditorMaxed: PropTypes.bool.isRequired,\r\n\r\n    isViewerMaxed: PropTypes.bool.isRequired,\r\n\r\n    editorText: PropTypes.string.isRequired,\r\n\r\n    transitionTimer: PropTypes.number.isRequired,\r\n    transitioning: PropTypes.bool.isRequired,\r\n\r\n    openingEditor: PropTypes.func.isRequired,\r\n    closingEditor: PropTypes.func.isRequired,\r\n    maxingEditor: PropTypes.func.isRequired,\r\n    miningEditor: PropTypes.func.isRequired,\r\n\r\n    editorTextChange: PropTypes.func.isRequired\r\n}\r\n\r\nfunction mapStateToProps( store ) {\r\n    return {\r\n        isEditorApplyClass: store.isEditorApplyClass,\r\n        isEditorApplyMaxClass: store.isEditorApplyMaxClass,\r\n        isEditorClosed: store.isEditorClosed,\r\n        isEditorMaxed: store.isEditorMaxed,\r\n\r\n        isViewerMaxed: store.isViewerMaxed,\r\n\r\n        editorText: store.editorText,\r\n\r\n        transitionTimer: store.transitionTimer,\r\n        transitioning: store.transitioning\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps( dispatch ) {\r\n    return {\r\n        openingEditor: () => dispatch( EditorAction.openingEditor() ),\r\n        closingEditor: () => dispatch( EditorAction.closingEditor() ),\r\n        maxingEditor: () => dispatch( EditorAction.maxingEditor() ),\r\n        miningEditor: () => dispatch( EditorAction.miningEditor() ),\r\n\r\n        editorTextChange: (text, position) => dispatch( EditorAction.editorTextChange(text, position) )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Editor);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport marked from 'marked';\r\nimport sounds from './sound';\r\n\r\nimport ViewerAction from '../Redux/Actions/ViewerAction';\r\n\r\n\r\nclass Viewer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.getClass = this.getClass.bind(this);\r\n        this.getIconClass = this.getIconClass.bind(this);\r\n        this.closeViewer = this.closeViewer.bind(this);\r\n        this.maxOrMinimize = this.maxOrMinimize.bind(this);\r\n    }\r\n\r\n    //  Adding Event listeners\r\n    componentDidMount() {\r\n        document.getElementById('viewer-close-btn').addEventListener('click', this.closeViewer );\r\n        document.getElementById('viewer-maxmin-btn').addEventListener('click', this.maxOrMinimize);\r\n\r\n        //  If the window resizes to wide screen, determine if the viewer has to be opened\r\n        //  Based on if the editor is maximized or not, and if the viewer is open or not\r\n        window.addEventListener('resize', () => {\r\n            if (window.innerWidth >= 800 && !this.props.isEditorMaxed && this.props.isViewerClosed ) {\r\n                this.props.openingViewer();\r\n            }\r\n        });\r\n    }\r\n\r\n    //  Apply appropriate class names to the viewer component\r\n    getClass() {\r\n        const { isViewerApplyClass, isViewerClosed, isViewerApplyMaxClass, isViewerMaxed } = this.props;\r\n        let cls = 'viewer';\r\n        if ( isViewerApplyClass ) cls += ' scale0';\r\n        if ( isViewerApplyMaxClass ) cls += ' maxClass';\r\n        if ( isViewerClosed ) cls += ' closed';\r\n        if ( isViewerMaxed ) cls += ' maxed';\r\n\r\n        return cls;\r\n    }\r\n\r\n    //  Apply appropriate class names to the maximize-minimize button. So it will show the correct icon for max min\r\n    getIconClass() {\r\n        let cls = 'fas viewer-maxmin-btn'\r\n        if (this.props.isViewerMaxed) cls += ' fa-compress-arrows-alt';\r\n        else cls += ' fa-expand-arrows-alt';\r\n        return cls;\r\n    }\r\n\r\n    //  Triggered when the close button is clicked\r\n    closeViewer() {\r\n        const { closingViewer } = this.props;\r\n        sounds.playBeep();\r\n        closingViewer();\r\n    }\r\n\r\n    //  Max or min button is clicked, so apply maximizing transition, then change the button type\r\n    maxOrMinimize() {\r\n        const { isViewerMaxed, maxingViewer, miningViewer, transitioning } = this.props;\r\n        if (transitioning) return;\r\n\r\n        sounds.playBeep();\r\n        if (isViewerMaxed ) {\r\n            miningViewer();\r\n        }\r\n        else maxingViewer();\r\n    }\r\n\r\n    render () {\r\n        //////////////JSX/////////////////\r\n        return (\r\n        <div className={ this.getClass() } id='viewer'>\r\n            <header className='win-header'>\r\n                <i className=\"fas fa-scroll win-header-logo\"></i>\r\n                PREVIEWER\r\n                <i tabIndex='1' className=\"fas fa-times viewer-btn\" id='viewer-close-btn'></i>\r\n                <i tabIndex='1' className={this.getIconClass() } id='viewer-maxmin-btn'></i>\r\n            </header>\r\n            <div className='view-div closeOpenTrans' id='preview' \r\n            dangerouslySetInnerHTML={ {__html: marked( this.props.editorText.replace(/\\n\\n/g, \"\\n\\n<br>\\n\\n\"), { breaks: true } ) } }>\r\n            </div>\r\n        </div>\r\n        );\r\n        ///////////////JSX///////////////\r\n    }\r\n}\r\n\r\n\r\nViewer.propTypes = {\r\n    isViewerApplyClass: PropTypes.bool.isRequired,\r\n    isViewerApplyMaxClass: PropTypes.bool.isRequired,\r\n    isViewerClosed: PropTypes.bool.isRequired,\r\n    isViewerMaxed: PropTypes.bool.isRequired,\r\n\r\n    editorText: PropTypes.string.isRequired,\r\n\r\n    isEditorMaxed: PropTypes.bool.isRequired,\r\n\r\n    transitionTimer: PropTypes.number.isRequired,\r\n\r\n    openingViewer: PropTypes.func.isRequired,\r\n    closingViewer: PropTypes.func.isRequired,\r\n    maxingViewer: PropTypes.func.isRequired,\r\n    miningViewer: PropTypes.func.isRequired\r\n}\r\n\r\nfunction mapStateToProps( store ) {\r\n    return {\r\n        isViewerApplyClass: store.isViewerApplyClass,\r\n        isViewerApplyMaxClass: store.isViewerApplyMaxClass,\r\n        isViewerClosed: store.isViewerClosed,\r\n        isViewerMaxed: store.isViewerMaxed,\r\n\r\n        editorText: store.editorText,\r\n\r\n        isEditorMaxed: store.isEditorMaxed,\r\n\r\n        transitionTimer: store.transitionTimer\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps( dispatch ) {\r\n    return {\r\n        openingViewer: () => dispatch( ViewerAction.openingViewer() ),\r\n        closingViewer: () => dispatch( ViewerAction.closingViewer() ),\r\n        maxingViewer: () => dispatch( ViewerAction.maxingViewer() ),\r\n        miningViewer: () => dispatch( ViewerAction.miningViewer() )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Viewer);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport sounds from './sound';\r\n\r\nimport EditorAction from '../Redux/Actions/EditorAction';\r\nimport ViewerAction from '../Redux/Actions/ViewerAction';\r\n\r\n\r\nclass ToolBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.editorBtnClicked = this.editorBtnClicked.bind(this);\r\n        this.vieworBtnClicked = this.vieworBtnClicked.bind(this);\r\n    }\r\n\r\n    //  Add Event Listeners\r\n    componentDidMount() {\r\n        document.getElementById('editor-btn').addEventListener('click', this.editorBtnClicked );\r\n        document.getElementById('viewer-btn').addEventListener('click', this.vieworBtnClicked );\r\n    }\r\n\r\n\r\n    editorBtnClicked() {\r\n        const { isEditorClosed, isViewerClosed, transitioning, \r\n            transitionTimer, closingEditor,openingEditor, closingViewer} = this.props;\r\n\r\n        //  The state shows the app is in the middle of transition. So do nothing\r\n        if (transitioning) return;\r\n\r\n        sounds.playBeep();\r\n\r\n        //  If the editor is not closed, then just trigger closing editor sequence\r\n        if ( !isEditorClosed ) closingEditor();\r\n        //  Otherwise we should open editor\r\n        else {\r\n            //  If viewer is not closed, we need to close viewer first. This takes some time, then only open editor\r\n            if ( !isViewerClosed ) {\r\n                closingViewer();\r\n                setTimeout(()=> {\r\n                    openingEditor();\r\n                }, transitionTimer);\r\n            }\r\n            //  Else viewer is not open, just open editor\r\n            else {\r\n                openingEditor();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    vieworBtnClicked() {\r\n        const { isEditorClosed, isViewerClosed, transitioning, \r\n            transitionTimer, closingEditor, closingViewer, openingViewer} = this.props;\r\n\r\n        //  The state shows the app is in the middle of transition. So do nothing\r\n        if (transitioning) return;\r\n\r\n        sounds.playBeep();\r\n\r\n        //  If the viewer is open, then just trigger closing viewer sequence\r\n        if ( !isViewerClosed ) closingViewer();\r\n        //  Else viewer is closed, we need to open it\r\n        else {\r\n            //  If editor is open, then we need to close editor first which take some time, then open viewer\r\n            if ( !isEditorClosed ) {\r\n                closingEditor();\r\n                setTimeout(() => {\r\n                    openingViewer();\r\n                }, transitionTimer);\r\n            }\r\n            //  Else editor is close. Just open viewer\r\n            else {\r\n                openingViewer();\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        ///////////////JSX/////////////////////\r\n        return (\r\n            <nav className='toolbar'>\r\n                <i className=\"fas fa-pen fa-3x icon\" id='editor-btn'></i>\r\n                <i className=\"fas fa-eye fa-3x icon\" id='viewer-btn'></i>\r\n            </nav>\r\n        );\r\n        ///////////////JSX//////////////////\r\n    }\r\n}\r\n\r\nToolBar.propTypes = {\r\n    isEditorClosed: PropTypes.bool.isRequired,\r\n    isViewerClosed: PropTypes.bool.isRequired,\r\n    transitioning: PropTypes.bool.isRequired,\r\n    transitionTimer: PropTypes.number.isRequired,\r\n\r\n    closingEditor: PropTypes.func.isRequired,\r\n    openingEditor: PropTypes.func.isRequired,\r\n    \r\n    closingViewer: PropTypes.func.isRequired,\r\n    openingViewer: PropTypes.func.isRequired\r\n}\r\n\r\nfunction mapStateToProps( store ) {\r\n    return {\r\n        isEditorClosed: store.isEditorClosed,\r\n        isViewerClosed: store.isViewerClosed,\r\n        transitioning: store.transitioning,\r\n        transitionTimer: store.transitionTimer\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps( dispatch ) {\r\n    return {\r\n        closingEditor: () => dispatch( EditorAction.closingEditor() ),\r\n        openingEditor: () => dispatch( EditorAction.openingEditor() ),\r\n        \r\n        closingViewer: () => dispatch( ViewerAction.closingViewer() ),\r\n        openingViewer: () => dispatch( ViewerAction.openingViewer() ),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ToolBar);","import React from 'react';\r\n\r\nimport Editor from './Editor';\r\nimport Viewer from './Viewer';\r\nimport ToolBar from './ToolBar';\r\n\r\n/*\r\n    Main Container. Contains All the components\r\n*/\r\n\r\nclass Container extends React.Component {\r\n\r\n    render() {\r\n        ////////////////////JSX///////////////////\r\n        return(\r\n            <div className='container'>\r\n                <Editor />\r\n                <Viewer />\r\n                <ToolBar />\r\n            </div>\r\n        );\r\n        ////////////////////JSX///////////////////\r\n    }\r\n}\r\n\r\nexport default Container;","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport store from './Redux/Store/store';\nimport Container from './Components/Container'\n\nfunction App() {\n  return (\n    <Provider store={store} >\n      <div className=\"App\">\n        <Container />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './Stylesheets/style.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}